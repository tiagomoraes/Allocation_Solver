exports.allocate = function(fileName) {
    let matrix = readMatrix(fileName);
    let result = solve(matrix);
    let resp = [];
    for (let i = 0; i < result[0].length; i++) {
        resp.push([result[0][i], result[1][i]]);
    }

    return resp;
}

function readMatrix(fileName) {
    let fs = require("fs");
    let lines  = fs.readFileSync(fileName, "utf8").split('\r\n');
    let matrix = [];
    for (let i = 0; i < lines.length; i++) {
        matrix[i] = lines[i].split(' ');
    }
    return matrix;
}

function solve(matrix) {
    let numTests = fatorial(matrix[0].length);
    let minSum = Number.MAX_SAFE_INTEGER;
    let actualSum = 0;
    let columns = (permutation(generateTestBase1xn(matrix.length)));
    let respostaProvisoria = generateTestBase2xn(matrix.length);
    let respostaDefinitiva = generateTestBase2xn(matrix.length);  
  
    for (let i = 0; i < numTests; i++) {
        for (let j = 0; j < matrix.length; j++) {
            respostaProvisoria[1][j] = columns[i][j];
        }
        actualSum = 0;
        for (let k = 0; k < matrix.length; k++) {
            actualSum = actualSum + matrix[k][respostaProvisoria[1][k]];
        }
        if (actualSum < minSum ){
            minSum = actualSum;
            for (let l = 0;l<matrix.length;l++) {
            respostaDefinitiva[1][l] = respostaProvisoria[1][l];
            }
        }
    }
    return respostaDefinitiva;
}

function permutation(array) {
    function p(array, temp) {
        var i, x;
        array.length || result.push(temp);
        for (i = 0; i < array.length; i++) {
            x = array.splice(i, 1)[0];
            p(array, temp.concat(x));
            array.splice(i, 0, x);
        }
    }
    
    var result = [];
    p(array, []);
    return result;
}

function generateTestBase2xn(n) {
    let result = [[], []];
    for (let i = 0; i < n; i++) {
        result[0].push(i);
    }
    result[1] = Array.from(result[0]);
    return result;
}

function generateTestBase1xn(n) {
    let result = [];
    for (let i = 0; i < n; i++) {
        result.push(i);
    }
    return result;
}

function fatorial(x){
    if (x == 0){
        return 1;
    } else {
        return x*fatorial(x-1);
	}
}

